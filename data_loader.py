# -*- coding: utf-8 -*-
"""Data_loader

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cux5US9UJb329658o7dZ-LQ86F2jrbVE
"""

import os
import cv2
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
import matplotlib.pyplot as plt
import scipy.io as sio
from scipy.ndimage import gaussian_filter
from google.colab import drive
drive.mount('/content/drive')


class ShanghaiTechDataset(Dataset):
    def __init__(self, image_dir, gt_dir, transform=None, sigma=15):
        self.image_dir = image_dir
        self.gt_dir = gt_dir
        self.transform = transform
        self.sigma = sigma

        self.image_files = sorted([
            f for f in os.listdir(image_dir)
            if f.lower().endswith(('.jpg', '.png'))
        ])

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        img_name = self.image_files[idx]
        img_path = os.path.join(self.image_dir, img_name)


        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        gt_name = f"GT_{os.path.splitext(img_name)[0]}.mat"
        gt_path = os.path.join(self.gt_dir, gt_name)

        if not os.path.exists(gt_path):
            raise FileNotFoundError(f"Ground truth file not found: {gt_path}")

        mat = sio.loadmat(gt_path)
        points = mat["image_info"][0, 0][0, 0][0]


        density_map = np.zeros((img.shape[0], img.shape[1]), dtype=np.float32)
        for point in points:
            x, y = min(int(point[0]), img.shape[1]-1), min(int(point[1]), img.shape[0]-1)
            density_map[y, x] = 1

        density_map = gaussian_filter(density_map, sigma=self.sigma)

        if self.transform:
            img = self.transform(img)

        density_map = cv2.resize(density_map, (img.shape[2], img.shape[1]))
        density_map = torch.tensor(density_map, dtype=torch.float32).unsqueeze(0)
        return img, density_map


def visualize_sample(dataset, idx=0, save_path="visualizations/samplep.png"):
    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    img, gt = dataset[idx]

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img.permute(1, 2, 0))
    plt.title("Image")
    plt.subplot(1, 2, 2)
    plt.imshow(gt.squeeze(0), cmap="jet")
    plt.title("Density Map")
    plt.savefig(save_path)
    plt.show()


if __name__ == "__main__":
    image_dir = r"/content/drive/MyDrive/archive (2)/ShanghaiTech/part_A/train_data/images"
    gt_dir = r"/content/drive/MyDrive/archive (2)/ShanghaiTech/part_A/train_data/ground-truth"

    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Resize((512, 512))
    ])
    dataset = ShanghaiTechDataset(image_dir=image_dir, gt_dir=gt_dir, transform=transform)
    loader = DataLoader(dataset, batch_size=4, shuffle=True)
    print(f"Total samples: {len(dataset)}")

    visualize_sample(dataset, idx=0)